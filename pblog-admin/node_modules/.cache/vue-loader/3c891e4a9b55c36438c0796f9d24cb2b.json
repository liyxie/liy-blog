{"remainingRequest":"E:\\MyWenJian\\Blogs\\rulin-blog\\pblog-admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\MyWenJian\\Blogs\\rulin-blog\\pblog-admin\\src\\components\\verifition\\Verify\\VerifyPoints.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\MyWenJian\\Blogs\\rulin-blog\\pblog-admin\\src\\components\\verifition\\Verify\\VerifyPoints.vue","mtime":1721286705967},{"path":"E:\\MyWenJian\\Blogs\\rulin-blog\\pblog-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1721358892040},{"path":"E:\\MyWenJian\\Blogs\\rulin-blog\\pblog-admin\\node_modules\\babel-loader\\lib\\index.js","mtime":1721358892834},{"path":"E:\\MyWenJian\\Blogs\\rulin-blog\\pblog-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1721358892040},{"path":"E:\\MyWenJian\\Blogs\\rulin-blog\\pblog-admin\\node_modules\\vue-loader\\lib\\index.js","mtime":1721358887250}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KDQovKioNCiAgICAgKiBWZXJpZnlQb2ludHMNCiAgICAgKiBAZGVzY3JpcHRpb24g54K56YCJDQogICAgICogKi8NCmltcG9ydCB7IHJlc2V0U2l6ZSwgX2NvZGVfY2hhcnMsIF9jb2RlX2NvbG9yMSwgX2NvZGVfY29sb3IyIH0gZnJvbSAnLi8uLi91dGlscy91dGlsJw0KaW1wb3J0IHsgYWVzRW5jcnlwdCB9IGZyb20gJy4vLi4vdXRpbHMvYXNlJw0KaW1wb3J0IHsgcmVxR2V0LCByZXFDaGVjayB9IGZyb20gJy4vLi4vYXBpL2luZGV4Jw0KDQpleHBvcnQgZGVmYXVsdCB7DQogIG5hbWU6ICdWZXJpZnlQb2ludHMnLA0KICBwcm9wczogew0KICAgIC8vIOW8ueWHuuW8j3BvcO+8jOWbuuWummZpeGVkDQogICAgbW9kZTogew0KICAgICAgdHlwZTogU3RyaW5nLA0KICAgICAgZGVmYXVsdDogJ2ZpeGVkJw0KICAgIH0sDQogICAgY2FwdGNoYVR5cGU6IHsNCiAgICAgIHR5cGU6IFN0cmluZw0KICAgIH0sDQogICAgLy8g6Ze06ZqUDQogICAgdlNwYWNlOiB7DQogICAgICB0eXBlOiBOdW1iZXIsDQogICAgICBkZWZhdWx0OiA1DQogICAgfSwNCiAgICBpbWdTaXplOiB7DQogICAgICB0eXBlOiBPYmplY3QsDQogICAgICBkZWZhdWx0KCkgew0KICAgICAgICByZXR1cm4gew0KICAgICAgICAgIHdpZHRoOiAnMzEwcHgnLA0KICAgICAgICAgIGhlaWdodDogJzE1NXB4Jw0KICAgICAgICB9DQogICAgICB9DQogICAgfSwNCiAgICBiYXJTaXplOiB7DQogICAgICB0eXBlOiBPYmplY3QsDQogICAgICBkZWZhdWx0KCkgew0KICAgICAgICByZXR1cm4gew0KICAgICAgICAgIHdpZHRoOiAnMzEwcHgnLA0KICAgICAgICAgIGhlaWdodDogJzQwcHgnDQogICAgICAgIH0NCiAgICAgIH0NCiAgICB9LA0KICAgIGRlZmF1bHRJbWc6IHsNCiAgICAgIHR5cGU6IFN0cmluZywNCiAgICAgIGRlZmF1bHQ6ICcnDQogICAgfQ0KICB9LA0KICBkYXRhKCkgew0KICAgIHJldHVybiB7DQogICAgICBzZWNyZXRLZXk6ICcnLCAvLyDlkI7nq6/ov5Tlm57nmoRhc2XliqDlr4bnp5jpkqUNCiAgICAgIGNoZWNrTnVtOiAzLCAvLyDpu5jorqTpnIDopoHngrnlh7vnmoTlrZfmlbANCiAgICAgIGZvbnRQb3M6IFtdLCAvLyDpgInkuK3nmoTlnZDmoIfkv6Hmga8NCiAgICAgIGNoZWNrUG9zQXJyOiBbXSwgLy8g55So5oi354K55Ye755qE5Z2Q5qCHDQogICAgICBudW06IDEsIC8vIOeCueWHu+eahOiusOaVsA0KICAgICAgcG9pbnRCYWNrSW1nQmFzZTogJycsIC8vIOWQjuerr+iOt+WPluWIsOeahOiDjOaZr+WbvueJhw0KICAgICAgcG9pblRleHRMaXN0OiBbXSwgLy8g5ZCO56uv6L+U5Zue55qE54K55Ye75a2X5L2T6aG65bqPDQogICAgICBiYWNrVG9rZW46ICcnLCAvLyDlkI7nq6/ov5Tlm57nmoR0b2tlbuWAvA0KICAgICAgc2V0U2l6ZTogew0KICAgICAgICBpbWdIZWlnaHQ6IDAsDQogICAgICAgIGltZ1dpZHRoOiAwLA0KICAgICAgICBiYXJIZWlnaHQ6IDAsDQogICAgICAgIGJhcldpZHRoOiAwDQogICAgICB9LA0KICAgICAgdGVtcFBvaW50czogW10sDQogICAgICB0ZXh0OiAnJywNCiAgICAgIGJhckFyZWFDb2xvcjogdW5kZWZpbmVkLA0KICAgICAgYmFyQXJlYUJvcmRlckNvbG9yOiB1bmRlZmluZWQsDQogICAgICBzaG93UmVmcmVzaDogdHJ1ZSwNCiAgICAgIGJpbmRpbmdDbGljazogdHJ1ZQ0KICAgIH0NCiAgfSwNCiAgY29tcHV0ZWQ6IHsNCiAgICByZXNldFNpemUoKSB7DQogICAgICByZXR1cm4gcmVzZXRTaXplDQogICAgfQ0KICB9LA0KICB3YXRjaDogew0KICAgIC8vIHR5cGXlj5jljJbliJnlhajpnaLliLfmlrANCiAgICB0eXBlOiB7DQogICAgICBpbW1lZGlhdGU6IHRydWUsDQogICAgICBoYW5kbGVyKCkgew0KICAgICAgICB0aGlzLmluaXQoKQ0KICAgICAgfQ0KICAgIH0NCiAgfSwNCiAgbW91bnRlZCgpIHsNCiAgICAvLyDnpoHmraLmi5bmi70NCiAgICB0aGlzLiRlbC5vbnNlbGVjdHN0YXJ0ID0gZnVuY3Rpb24oKSB7DQogICAgICByZXR1cm4gZmFsc2UNCiAgICB9DQogIH0sDQogIG1ldGhvZHM6IHsNCiAgICBpbml0KCkgew0KICAgICAgLy8g5Yqg6L296aG16Z2iDQogICAgICB0aGlzLmZvbnRQb3Muc3BsaWNlKDAsIHRoaXMuZm9udFBvcy5sZW5ndGgpDQogICAgICB0aGlzLmNoZWNrUG9zQXJyLnNwbGljZSgwLCB0aGlzLmNoZWNrUG9zQXJyLmxlbmd0aCkNCiAgICAgIHRoaXMubnVtID0gMQ0KICAgICAgdGhpcy5nZXRQaWN0cnVlKCkNCiAgICAgIHRoaXMuJG5leHRUaWNrKCgpID0+IHsNCiAgICAgICAgdGhpcy5zZXRTaXplID0gdGhpcy5yZXNldFNpemUodGhpcykJLy8g6YeN5paw6K6+572u5a695bqm6auY5bqmDQogICAgICAgIHRoaXMuJHBhcmVudC4kZW1pdCgncmVhZHknLCB0aGlzKQ0KICAgICAgfSkNCiAgICB9LA0KICAgIGNhbnZhc0NsaWNrKGUpIHsNCiAgICAgIHRoaXMuY2hlY2tQb3NBcnIucHVzaCh0aGlzLmdldE1vdXNlUG9zKHRoaXMuJHJlZnMuY2FudmFzLCBlKSkNCiAgICAgIGlmICh0aGlzLm51bSA9PSB0aGlzLmNoZWNrTnVtKSB7DQogICAgICAgIHRoaXMubnVtID0gdGhpcy5jcmVhdGVQb2ludCh0aGlzLmdldE1vdXNlUG9zKHRoaXMuJHJlZnMuY2FudmFzLCBlKSkNCiAgICAgICAgLy8g5oyJ5q+U5L6L6L2s5o2i5Z2Q5qCH5YC8DQogICAgICAgIHRoaXMuY2hlY2tQb3NBcnIgPSB0aGlzLnBvaW50VHJhbnNmcm9tKHRoaXMuY2hlY2tQb3NBcnIsIHRoaXMuc2V0U2l6ZSkNCiAgICAgICAgLy8g562J5Yib5bu65Z2Q5qCH5omn6KGM5a6MDQogICAgICAgIHNldFRpbWVvdXQoKCkgPT4gew0KICAgICAgICAgIC8vIHZhciBmbGFnID0gdGhpcy5jb21wYXJlUG9zKHRoaXMuZm9udFBvcywgdGhpcy5jaGVja1Bvc0Fycik7DQogICAgICAgICAgLy8g5Y+R6YCB5ZCO56uv6K+35rGCDQogICAgICAgICAgdmFyIGNhcHRjaGFWZXJpZmljYXRpb24gPSB0aGlzLnNlY3JldEtleSA/IGFlc0VuY3J5cHQodGhpcy5iYWNrVG9rZW4gKyAnLS0tJyArIEpTT04uc3RyaW5naWZ5KHRoaXMuY2hlY2tQb3NBcnIpLCB0aGlzLnNlY3JldEtleSkgOiB0aGlzLmJhY2tUb2tlbiArICctLS0nICsgSlNPTi5zdHJpbmdpZnkodGhpcy5jaGVja1Bvc0FycikNCiAgICAgICAgICBjb25zdCBkYXRhID0gew0KICAgICAgICAgICAgY2FwdGNoYVR5cGU6IHRoaXMuY2FwdGNoYVR5cGUsDQogICAgICAgICAgICAncG9pbnRKc29uJzogdGhpcy5zZWNyZXRLZXkgPyBhZXNFbmNyeXB0KEpTT04uc3RyaW5naWZ5KHRoaXMuY2hlY2tQb3NBcnIpLCB0aGlzLnNlY3JldEtleSkgOiBKU09OLnN0cmluZ2lmeSh0aGlzLmNoZWNrUG9zQXJyKSwNCiAgICAgICAgICAgICd0b2tlbic6IHRoaXMuYmFja1Rva2VuDQogICAgICAgICAgfQ0KICAgICAgICAgIHJlcUNoZWNrKGRhdGEpLnRoZW4ocmVzID0+IHsNCiAgICAgICAgICAgIGlmIChyZXMucmVwQ29kZSA9PSAnMDAwMCcpIHsNCiAgICAgICAgICAgICAgdGhpcy5iYXJBcmVhQ29sb3IgPSAnIzRjYWU0YycNCiAgICAgICAgICAgICAgdGhpcy5iYXJBcmVhQm9yZGVyQ29sb3IgPSAnIzVjYjg1YycNCiAgICAgICAgICAgICAgdGhpcy50ZXh0ID0gJ+mqjOivgeaIkOWKnycNCiAgICAgICAgICAgICAgdGhpcy5iaW5kaW5nQ2xpY2sgPSBmYWxzZQ0KICAgICAgICAgICAgICBpZiAodGhpcy5tb2RlID09ICdwb3AnKSB7DQogICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7DQogICAgICAgICAgICAgICAgICB0aGlzLiRwYXJlbnQuY2xpY2tTaG93ID0gZmFsc2UNCiAgICAgICAgICAgICAgICAgIHRoaXMucmVmcmVzaCgpDQogICAgICAgICAgICAgICAgfSwgMTUwMCkNCiAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICB0aGlzLiRwYXJlbnQuJGVtaXQoJ3N1Y2Nlc3MnLCB7IGNhcHRjaGFWZXJpZmljYXRpb24gfSkNCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgIHRoaXMuJHBhcmVudC4kZW1pdCgnZXJyb3InLCB0aGlzKQ0KICAgICAgICAgICAgICB0aGlzLmJhckFyZWFDb2xvciA9ICcjZDk1MzRmJw0KICAgICAgICAgICAgICB0aGlzLmJhckFyZWFCb3JkZXJDb2xvciA9ICcjZDk1MzRmJw0KICAgICAgICAgICAgICB0aGlzLnRleHQgPSAn6aqM6K+B5aSx6LSlJw0KICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHsNCiAgICAgICAgICAgICAgICB0aGlzLnJlZnJlc2goKQ0KICAgICAgICAgICAgICB9LCA3MDApDQogICAgICAgICAgICB9DQogICAgICAgICAgfSkNCiAgICAgICAgfSwgNDAwKQ0KICAgICAgfQ0KICAgICAgaWYgKHRoaXMubnVtIDwgdGhpcy5jaGVja051bSkgew0KICAgICAgICB0aGlzLm51bSA9IHRoaXMuY3JlYXRlUG9pbnQodGhpcy5nZXRNb3VzZVBvcyh0aGlzLiRyZWZzLmNhbnZhcywgZSkpDQogICAgICB9DQogICAgfSwNCg0KICAgIC8vIOiOt+WPluWdkOaghw0KICAgIGdldE1vdXNlUG9zOiBmdW5jdGlvbihvYmosIGUpIHsNCiAgICAgIHZhciB4ID0gZS5vZmZzZXRYDQogICAgICB2YXIgeSA9IGUub2Zmc2V0WQ0KICAgICAgcmV0dXJuIHsgeCwgeSB9DQogICAgfSwNCiAgICAvLyDliJvlu7rlnZDmoIfngrkNCiAgICBjcmVhdGVQb2ludDogZnVuY3Rpb24ocG9zKSB7DQogICAgICB0aGlzLnRlbXBQb2ludHMucHVzaChPYmplY3QuYXNzaWduKHt9LCBwb3MpKQ0KICAgICAgcmV0dXJuICsrdGhpcy5udW0NCiAgICB9LA0KICAgIHJlZnJlc2g6IGZ1bmN0aW9uKCkgew0KICAgICAgdGhpcy50ZW1wUG9pbnRzLnNwbGljZSgwLCB0aGlzLnRlbXBQb2ludHMubGVuZ3RoKQ0KICAgICAgdGhpcy5iYXJBcmVhQ29sb3IgPSAnIzAwMCcNCiAgICAgIHRoaXMuYmFyQXJlYUJvcmRlckNvbG9yID0gJyNkZGQnDQogICAgICB0aGlzLmJpbmRpbmdDbGljayA9IHRydWUNCiAgICAgIHRoaXMuZm9udFBvcy5zcGxpY2UoMCwgdGhpcy5mb250UG9zLmxlbmd0aCkNCiAgICAgIHRoaXMuY2hlY2tQb3NBcnIuc3BsaWNlKDAsIHRoaXMuY2hlY2tQb3NBcnIubGVuZ3RoKQ0KICAgICAgdGhpcy5udW0gPSAxDQogICAgICB0aGlzLmdldFBpY3RydWUoKQ0KICAgICAgdGhpcy50ZXh0ID0gJ+mqjOivgeWksei0pScNCiAgICAgIHRoaXMuc2hvd1JlZnJlc2ggPSB0cnVlDQogICAgfSwNCg0KICAgIC8vIOivt+axguiDjOaZr+WbvueJh+WSjOmqjOivgeWbvueJhw0KICAgIGdldFBpY3RydWUoKSB7DQogICAgICBjb25zdCBkYXRhID0gew0KICAgICAgICBjYXB0Y2hhVHlwZTogdGhpcy5jYXB0Y2hhVHlwZSwNCiAgICAgICAgY2xpZW50VWlkOiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncG9pbnQnKSwNCiAgICAgICAgdHM6IERhdGUubm93KCkgLy8g546w5Zyo55qE5pe26Ze05oizDQogICAgICB9DQogICAgICByZXFHZXQoZGF0YSkudGhlbihyZXMgPT4gew0KICAgICAgICBpZiAocmVzLnJlcENvZGUgPT0gJzAwMDAnKSB7DQogICAgICAgICAgdGhpcy5wb2ludEJhY2tJbWdCYXNlID0gcmVzLnJlcERhdGEub3JpZ2luYWxJbWFnZUJhc2U2NA0KICAgICAgICAgIHRoaXMuYmFja1Rva2VuID0gcmVzLnJlcERhdGEudG9rZW4NCiAgICAgICAgICB0aGlzLnNlY3JldEtleSA9IHJlcy5yZXBEYXRhLnNlY3JldEtleQ0KICAgICAgICAgIHRoaXMucG9pblRleHRMaXN0ID0gcmVzLnJlcERhdGEud29yZExpc3QNCiAgICAgICAgICB0aGlzLnRleHQgPSAn6K+35L6d5qyh54K55Ye744CQJyArIHRoaXMucG9pblRleHRMaXN0LmpvaW4oJywnKSArICfjgJEnDQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgdGhpcy50ZXh0ID0gcmVzLnJlcE1zZw0KICAgICAgICB9DQoNCiAgICAgICAgLy8g5Yik5pat5o6l5Y+j6K+35rGC5qyh5pWw5piv5ZCm5aSx5pWIDQogICAgICAgIGlmIChyZXMucmVwQ29kZSA9PSAnNjIwMScpIHsNCiAgICAgICAgICB0aGlzLnBvaW50QmFja0ltZ0Jhc2UgPSBudWxsDQogICAgICAgIH0NCiAgICAgIH0pDQogICAgfSwNCiAgICAvLyDlnZDmoIfovazmjaLlh73mlbANCiAgICBwb2ludFRyYW5zZnJvbShwb2ludEFyciwgaW1nU2l6ZSkgew0KICAgICAgdmFyIG5ld1BvaW50QXJyID0gcG9pbnRBcnIubWFwKHAgPT4gew0KICAgICAgICBjb25zdCB4ID0gTWF0aC5yb3VuZCgzMTAgKiBwLnggLyBwYXJzZUludChpbWdTaXplLmltZ1dpZHRoKSkNCiAgICAgICAgY29uc3QgeSA9IE1hdGgucm91bmQoMTU1ICogcC55IC8gcGFyc2VJbnQoaW1nU2l6ZS5pbWdIZWlnaHQpKQ0KICAgICAgICByZXR1cm4geyB4LCB5IH0NCiAgICAgIH0pDQogICAgICAvLyBjb25zb2xlLmxvZyhuZXdQb2ludEFyciwibmV3UG9pbnRBcnIiKTsNCiAgICAgIHJldHVybiBuZXdQb2ludEFycg0KICAgIH0NCiAgfQ0KfQ0K"},{"version":3,"sources":["VerifyPoints.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0DA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"VerifyPoints.vue","sourceRoot":"src/components/verifition/Verify","sourcesContent":["<template>\r\n  <div\r\n    style=\"position: relative\"\r\n  >\r\n    <div class=\"verify-img-out\">\r\n      <div\r\n        class=\"verify-img-panel\"\r\n        :style=\"{'width': setSize.imgWidth,\r\n                 'height': setSize.imgHeight,\r\n                 'background-size' : setSize.imgWidth + ' '+ setSize.imgHeight,\r\n                 'margin-bottom': vSpace + 'px'}\"\r\n      >\r\n        <div v-show=\"showRefresh\" class=\"verify-refresh\" style=\"z-index:3\" @click=\"refresh\">\r\n          <i class=\"iconfont icon-refresh\" />\r\n        </div>\r\n        <img\r\n          ref=\"canvas\"\r\n          :src=\"pointBackImgBase?('data:image/png;base64,'+pointBackImgBase):defaultImg\"\r\n          alt=\"\"\r\n          style=\"width:100%;height:100%;display:block\"\r\n          @click=\"bindingClick?canvasClick($event):undefined\"\r\n        >\r\n\r\n        <div\r\n          v-for=\"(tempPoint, index) in tempPoints\"\r\n          :key=\"index\"\r\n          class=\"point-area\"\r\n          :style=\"{\r\n            'background-color':'#1abd6c',\r\n            color:'#fff',\r\n            'z-index':9999,\r\n            width:'20px',\r\n            height:'20px',\r\n            'text-align':'center',\r\n            'line-height':'20px',\r\n            'border-radius': '50%',\r\n            position:'absolute',\r\n            top:parseInt(tempPoint.y-10) + 'px',\r\n            left:parseInt(tempPoint.x-10) + 'px'\r\n          }\"\r\n        >\r\n          {{ index + 1 }}\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <!-- 'height': this.barSize.height, -->\r\n    <div\r\n      class=\"verify-bar-area\"\r\n      :style=\"{'width': setSize.imgWidth,\r\n               'color': this.barAreaColor,\r\n               'border-color': this.barAreaBorderColor,\r\n               'line-height':this.barSize.height}\"\r\n    >\r\n      <span class=\"verify-msg\">{{ text }}</span>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script type=\"text/babel\">\r\n/**\r\n     * VerifyPoints\r\n     * @description 点选\r\n     * */\r\nimport { resetSize, _code_chars, _code_color1, _code_color2 } from './../utils/util'\r\nimport { aesEncrypt } from './../utils/ase'\r\nimport { reqGet, reqCheck } from './../api/index'\r\n\r\nexport default {\r\n  name: 'VerifyPoints',\r\n  props: {\r\n    // 弹出式pop，固定fixed\r\n    mode: {\r\n      type: String,\r\n      default: 'fixed'\r\n    },\r\n    captchaType: {\r\n      type: String\r\n    },\r\n    // 间隔\r\n    vSpace: {\r\n      type: Number,\r\n      default: 5\r\n    },\r\n    imgSize: {\r\n      type: Object,\r\n      default() {\r\n        return {\r\n          width: '310px',\r\n          height: '155px'\r\n        }\r\n      }\r\n    },\r\n    barSize: {\r\n      type: Object,\r\n      default() {\r\n        return {\r\n          width: '310px',\r\n          height: '40px'\r\n        }\r\n      }\r\n    },\r\n    defaultImg: {\r\n      type: String,\r\n      default: ''\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      secretKey: '', // 后端返回的ase加密秘钥\r\n      checkNum: 3, // 默认需要点击的字数\r\n      fontPos: [], // 选中的坐标信息\r\n      checkPosArr: [], // 用户点击的坐标\r\n      num: 1, // 点击的记数\r\n      pointBackImgBase: '', // 后端获取到的背景图片\r\n      poinTextList: [], // 后端返回的点击字体顺序\r\n      backToken: '', // 后端返回的token值\r\n      setSize: {\r\n        imgHeight: 0,\r\n        imgWidth: 0,\r\n        barHeight: 0,\r\n        barWidth: 0\r\n      },\r\n      tempPoints: [],\r\n      text: '',\r\n      barAreaColor: undefined,\r\n      barAreaBorderColor: undefined,\r\n      showRefresh: true,\r\n      bindingClick: true\r\n    }\r\n  },\r\n  computed: {\r\n    resetSize() {\r\n      return resetSize\r\n    }\r\n  },\r\n  watch: {\r\n    // type变化则全面刷新\r\n    type: {\r\n      immediate: true,\r\n      handler() {\r\n        this.init()\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    // 禁止拖拽\r\n    this.$el.onselectstart = function() {\r\n      return false\r\n    }\r\n  },\r\n  methods: {\r\n    init() {\r\n      // 加载页面\r\n      this.fontPos.splice(0, this.fontPos.length)\r\n      this.checkPosArr.splice(0, this.checkPosArr.length)\r\n      this.num = 1\r\n      this.getPictrue()\r\n      this.$nextTick(() => {\r\n        this.setSize = this.resetSize(this)\t// 重新设置宽度高度\r\n        this.$parent.$emit('ready', this)\r\n      })\r\n    },\r\n    canvasClick(e) {\r\n      this.checkPosArr.push(this.getMousePos(this.$refs.canvas, e))\r\n      if (this.num == this.checkNum) {\r\n        this.num = this.createPoint(this.getMousePos(this.$refs.canvas, e))\r\n        // 按比例转换坐标值\r\n        this.checkPosArr = this.pointTransfrom(this.checkPosArr, this.setSize)\r\n        // 等创建坐标执行完\r\n        setTimeout(() => {\r\n          // var flag = this.comparePos(this.fontPos, this.checkPosArr);\r\n          // 发送后端请求\r\n          var captchaVerification = this.secretKey ? aesEncrypt(this.backToken + '---' + JSON.stringify(this.checkPosArr), this.secretKey) : this.backToken + '---' + JSON.stringify(this.checkPosArr)\r\n          const data = {\r\n            captchaType: this.captchaType,\r\n            'pointJson': this.secretKey ? aesEncrypt(JSON.stringify(this.checkPosArr), this.secretKey) : JSON.stringify(this.checkPosArr),\r\n            'token': this.backToken\r\n          }\r\n          reqCheck(data).then(res => {\r\n            if (res.repCode == '0000') {\r\n              this.barAreaColor = '#4cae4c'\r\n              this.barAreaBorderColor = '#5cb85c'\r\n              this.text = '验证成功'\r\n              this.bindingClick = false\r\n              if (this.mode == 'pop') {\r\n                setTimeout(() => {\r\n                  this.$parent.clickShow = false\r\n                  this.refresh()\r\n                }, 1500)\r\n              }\r\n              this.$parent.$emit('success', { captchaVerification })\r\n            } else {\r\n              this.$parent.$emit('error', this)\r\n              this.barAreaColor = '#d9534f'\r\n              this.barAreaBorderColor = '#d9534f'\r\n              this.text = '验证失败'\r\n              setTimeout(() => {\r\n                this.refresh()\r\n              }, 700)\r\n            }\r\n          })\r\n        }, 400)\r\n      }\r\n      if (this.num < this.checkNum) {\r\n        this.num = this.createPoint(this.getMousePos(this.$refs.canvas, e))\r\n      }\r\n    },\r\n\r\n    // 获取坐标\r\n    getMousePos: function(obj, e) {\r\n      var x = e.offsetX\r\n      var y = e.offsetY\r\n      return { x, y }\r\n    },\r\n    // 创建坐标点\r\n    createPoint: function(pos) {\r\n      this.tempPoints.push(Object.assign({}, pos))\r\n      return ++this.num\r\n    },\r\n    refresh: function() {\r\n      this.tempPoints.splice(0, this.tempPoints.length)\r\n      this.barAreaColor = '#000'\r\n      this.barAreaBorderColor = '#ddd'\r\n      this.bindingClick = true\r\n      this.fontPos.splice(0, this.fontPos.length)\r\n      this.checkPosArr.splice(0, this.checkPosArr.length)\r\n      this.num = 1\r\n      this.getPictrue()\r\n      this.text = '验证失败'\r\n      this.showRefresh = true\r\n    },\r\n\r\n    // 请求背景图片和验证图片\r\n    getPictrue() {\r\n      const data = {\r\n        captchaType: this.captchaType,\r\n        clientUid: localStorage.getItem('point'),\r\n        ts: Date.now() // 现在的时间戳\r\n      }\r\n      reqGet(data).then(res => {\r\n        if (res.repCode == '0000') {\r\n          this.pointBackImgBase = res.repData.originalImageBase64\r\n          this.backToken = res.repData.token\r\n          this.secretKey = res.repData.secretKey\r\n          this.poinTextList = res.repData.wordList\r\n          this.text = '请依次点击【' + this.poinTextList.join(',') + '】'\r\n        } else {\r\n          this.text = res.repMsg\r\n        }\r\n\r\n        // 判断接口请求次数是否失效\r\n        if (res.repCode == '6201') {\r\n          this.pointBackImgBase = null\r\n        }\r\n      })\r\n    },\r\n    // 坐标转换函数\r\n    pointTransfrom(pointArr, imgSize) {\r\n      var newPointArr = pointArr.map(p => {\r\n        const x = Math.round(310 * p.x / parseInt(imgSize.imgWidth))\r\n        const y = Math.round(155 * p.y / parseInt(imgSize.imgHeight))\r\n        return { x, y }\r\n      })\r\n      // console.log(newPointArr,\"newPointArr\");\r\n      return newPointArr\r\n    }\r\n  }\r\n}\r\n</script>\r\n"]}]}